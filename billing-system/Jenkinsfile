pipeline {
    agent any
    environment {
        PATH = "C:/Users/e039325/Downloads/apache-maven-3.9.8-bin/apache-maven-3.9.8/bin;${env.PATH}"
        KUBECONFIG = "C:/Users/e039325/.kube/config" // Set the path to kubeconfig
        DOCKER_REGISTRY = "docker.io" 
        IMAGE_NAME = "mrudulaa94/billing_server_repo"
    }
    stages {
        stage('Clone') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/stable']],
                    userRemoteConfigs: [[url: 'https://github.com/NandanVasistaBH/billing_system_server.git']]
                ])
            }
        }
        stage("Maven") {
            steps {
                bat '''
                cd billing-system
                dir
                mvn install
                '''
            }
        }
        stage("Build Docker Image") {
            steps {
                script {
                    try {
                        bat "docker rmi -f mrudulaa94/billing_server_repo"
                        bat "docker rm -f mysql-container"
                        bat "docker rm -f billing-system"
                        echo "Removed existing Docker image and building a new one and deleting the container of mysql"
                    } catch(Exception e) {
                        echo "Exception occurred: " + e.toString()
                    }
                    bat "cd billing-system && docker build -t mrudulaa94/billing_server_repo ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                    }
                    bat "docker push  ${IMAGE_NAME}"                    
                }
            }
        }
        // Uncomment and modify as needed
        // stage("Create Docker Network") {
        //     steps {
        //         script {
        //             try {
        //                 bat "docker network create my-network"
        //             } catch(Exception e) {
        //                 echo "Exception occurred: " + e.toString()
        //             }
        //         }
        //     }
        // }
        // stage("Run MySQL Container") {
        //     steps {
        //         bat '''
        //         docker run -d --name mysql-container --network my-network -p 3307:3306 -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=Nand@39325 -e MYSQL_DATABASE=billing_system2 mysql:latest
        //         '''
        //     }
        // }
        // stage("Run Spring Boot Container") {
        //     steps {
        //         bat '''
        //         docker run -d --name billing-system --network my-network -p 8081:10000 billing-system
        //         '''
        //     }
        // }
        // stage("Docker compose") {
        //     steps {
        //         bat "cd billing-system && docker compose up -d"
        //     }
        // }
        stage('Deploy') {
            steps {
                script {
                    bat '''
                    cd billing-system
                    kubectl config use-context docker-desktop
                    kubectl apply -f mysql-storage.yaml
                    kubectl apply -f mysql-deployment.yaml
                    kubectl apply -f spring-app-deployment.yaml
                    kubectl apply -f spring-app-service.yaml
                    kubectl apply -f hpa.yaml
                    '''
                }
            }
        }
        stage('Verify') {
            steps {
                script {
                    // Verify deployments, services, and HPA
                    bat '''
                    kubectl get pv
                    kubectl get pvc
                    kubectl get deployments
                    kubectl get services
                    kubectl get hpa
                    '''
                }
            }
        }
    }
}
